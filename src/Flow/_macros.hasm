
struc THREAD_CONTEXT
	.Rip: resq 1;

	.Rax: resq 1;
	.Rcx: resq 1;
	.Rdx: resq 1;
	.Rbx: resq 1;
	.Rsp: resq 1;
	.Rbp: resq 1;
	.Rsi: resq 1;
	.Rdi: resq 1;
	.R8: resq 1;
	.R9: resq 1;
	.R10: resq 1;
	.R11: resq 1;
	.R12: resq 1;
	.R13: resq 1;
	.R14: resq 1;
	.R15: resq 1;
	.EFlags: resq 1; //we don't care aboute higher 32 bits

    .Xmm0: resq 2;
    .Xmm1: resq 2;
    .Xmm2: resq 2;
    .Xmm3: resq 2;
    .Xmm4: resq 2;
    .Xmm5: resq 2;
endstruc

struc CONTEXT 

    ;//
    ;// Register parameter home addresses.
    ;//
    ;// N.B. These fields are for convience - they could be used to extend the
    ;//      context record in the future.
    ;//

    .P1Home: resq 1;
    .P2Home: resq 1;
    .P3Home: resq 1;
    .P4Home: resq 1;
    .P5Home: resq 1;
    .P6Home: resq 1;

    ;//
    ;// Control flags.
    ;//

    .ContextFlags: resd 1;
    .MxCsr: resd 1;

    ;//
    ;// Segment Registers and processor flags.
    ;//

    .SegCs: resw 1;
    .SegDs: resw 1;
    .SegEs: resw 1;
    .SegFs: resw 1;
    .SegGs: resw 1;
    .SegSs: resw 1;
    .EFlags: resd 1;

    ;//
    ;// Debug registers
    ;//

    .Dr0: resq 1;
    .Dr1: resq 1;
    .Dr2: resq 1;
    .Dr3: resq 1;
	.Dr6: resq 1;
    .Dr7: resq 1;

    ;//
    ;// Integer registers.
    ;//

    .Rax: resq 1;
    .Rcx: resq 1;
    .Rdx: resq 1;
    .Rbx: resq 1;
    .Rsp: resq 1;
    .Rbp: resq 1;
    .Rsi: resq 1;
    .Rdi: resq 1;
    .R8: resq 1;
    .R9: resq 1;
    .R10: resq 1;
    .R11: resq 1;
    .R12: resq 1;
    .R13: resq 1;
    .R14: resq 1;
    .R15: resq 1;

    ;//
    ;// Program counter.
    ;//

    .Rip: resq 1;

    ;//
    ;// Floating point state.
    ;//

  
            .Header0: resq 4;
			.Legacy: resq 16;
            .Xmm0: resq 2;
            .Xmm1: resq 2;
            .Xmm2: resq 2;
            .Xmm3: resq 2;
            .Xmm4: resq 2;
            .Xmm5: resq 2;
            .Xmm6: resq 2;
            .Xmm7: resq 2;
            .Xmm8: resq 2;
            .Xmm9: resq 2;
            .Xmm10: resq 2;
            .Xmm11: resq 2;
            .Xmm12: resq 2;
            .Xmm13: resq 2;
            .Xmm14: resq 2;
            .Xmm15: resq 2;
   

    ;//
    ;// Vector registers.
    ;//

	.VectorRegister: resq 52;
    .VectorControl: resq 1;

    ;//
    ;// Special debug control registers.
    ;//

    .DebugControl: resq 1;
    .LastBranchToRip: resq 1;
    .LastBranchFromRip: resq 1;
    .LastExceptionToRip: resq 1;
    .LastExceptionFromRip: resq 1;
endstruc

section .text ; makes this executable
	USE64


	%macro PUSH_REGISTER_ENTIER_CALLEE_SAFE 0
		push rdx
		push rbp
		push rsi
		push rdi
		push r12
		push r13
		push r14
		push r15
	%endmacro

	%macro PUSH_REGISTER_ENTIER_VOLATILE 0
		pushfq
		push rax
		push rcx
		push rdx
		push r8
		push r9
		push r10
		push r11
	%endmacro

	%macro PUSH_REGISTER_XMM_CALLEE_SAFE 0
		sub     rsp, 10h
		movdqu  [rsp], xmm6
		sub     rsp, 10h
		movdqu  [rsp], xmm7
		sub     rsp, 10h
		movdqu  [rsp], xmm8
		sub     rsp, 10h
		movdqu  [rsp], xmm9
		sub     rsp, 10h
		movdqu  [rsp], xmm10
		sub     rsp, 10h
		movdqu  [rsp], xmm11
		sub     rsp, 10h
		movdqu  [rsp], xmm12
		sub     rsp, 10h
		movdqu  [rsp], xmm13
		sub     rsp, 10h
		movdqu  [rsp], xmm14
		sub     rsp, 10h
		movdqu  [rsp], xmm15
	%endmacro

	%macro PUSH_REGISTER_XMM_VOLATILE 0
		sub rsp, 60h
		movdqu [rsp], xmm5
		movdqu [rsp + 10h], xmm4
		movdqu [rsp + 20h], xmm3
		movdqu [rsp + 30h], xmm2
		movdqu [rsp + 40h], xmm1
		movdqu [rsp + 50h], xmm0
	%endmacro

	%macro POP_REGISTER_ENTIER_CALLEE_SAFE 0
		pop r15
		pop r14
		pop r13
		pop r12
		pop rdi
		pop rsi
		pop rbp
		pop rdx
	%endmacro

	%macro POP_REGISTER_ENTIER_VOLATILE 0
		pop r11
		pop r10
		pop r9
		pop r8
		pop rdx
		pop rcx
		pop rax
		popfq
	%endmacro

	
	%macro POP_REGISTER_XMM_CALLEE_SAFE 0
		movdqu  xmm15, [rsp]
		add rsp, 10h
		movdqu  xmm14, [rsp]
		add rsp, 10h
		movdqu  xmm13, [rsp]
		add rsp, 10h
		movdqu  xmm12, [rsp]
		add rsp, 10h
		movdqu  xmm11, [rsp]
		add rsp, 10h
		movdqu  xmm10, [rsp]
		add rsp, 10h
		movdqu  xmm9, [rsp]
		add rsp, 10h
		movdqu  xmm8, [rsp]
		add rsp, 10h
		movdqu  xmm7, [rsp]
		add rsp, 10h
		movdqu  xmm6, [rsp]
		add rsp, 10h
	%endmacro

	%macro POP_REGISTER_XMM_VOLATILE 0
		movdqu  xmm5, [rsp]
		movdqu  xmm4, [rsp + 10h]
		movdqu  xmm3, [rsp + 20h]
		movdqu  xmm2, [rsp + 30h]
		movdqu  xmm1, [rsp + 40h]
		movdqu  xmm0, [rsp + 50h]
		add rsp, 60h
	%endmacro
